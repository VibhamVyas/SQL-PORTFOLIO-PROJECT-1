use ipl_analysis;


SELECT 
    *
FROM
    ipl_2008_2020;
SELECT 
    *
FROM
    ipl_matches;
CREATE TABLE ipl_matches (
    id INT,
    city VARCHAR(225),
    date DATE,
    plyare_of_match VARCHAR(225),
    venue TEXT,
    neutral_venue INT,
    team1 VARCHAR(225),
    team2 VARCHAR(225),
    toss_winner VARCHAR(225),
    toss_decision VARCHAR(225),
    winner VARCHAR(225),
    result VARCHAR(225),
    result_margin INT,
    eliminator VARCHAR(20),
    method VARCHAR(25),
    umpire1 VARCHAR(225),
    umpire2 VARCHAR(225)
);




show VARIABLES like 'local_infile';

set GLOBAL local_infile =1;

load data local infile 'C:/Users/vibha/Downloads/IPL SQL PORTFOLIO PROJECT/IPL Ball-by-Ball 2008-2020.csv'
into table ipl_2008_2020
fields terminated by ',' 
ignore 1 rows;

/*show VARIABLES like 'local_infile';

set GLOBAL local_infile =1;

load data local infile 'C:/Users/vibha/Downloads/IPL SQL PORTFOLIO PROJECT/IPL Ball-by-Ball 2008-2020.csv'
into table ipl_2008_2020
fields terminated by ',' 
ignore 1 rows;*/

SELECT 
    *
FROM
    ipl_2008_2020;

 set sql_safe_updates = 0;
 
load data local infile 'C:/Users/vibha/Downloads/IPL SQL PORTFOLIO PROJECT/IPL Matches 2008-2020.csv'
into table ipl_matches
fields terminated by ',' 
ignore 1 rows;

SELECT 
    *
FROM
    ipl_matches;
SELECT 
    *
FROM
    ipl_2008_2020;

SELECT 
    COUNT(*)
FROM
    ipl_matches;

COMMIT;

-- TOURNAMENT SPECIFIC ANALYSIS

SELECT 
    COUNT(DISTINCT ID) AS TOTAL_MATCHES_PLAYED,
    COUNT(DISTINCT batsman) AS TOTAL_BATSMAN,
    COUNT(DISTINCT bowler) AS TOTAL_BOWLERS,
    ROUND(SUM(BALL) / 8, 0) AS TOTAL_APPROX_OVERS_BOWLED,
    SUM(TOTAL_RUNS) AS TOTAL_RUNS_SCORED,
    SUM(BALL) AS TOTAL_BOWLS_BOWLED,
    SUM(IS_WICKET) AS TOTAL_NUMBER_OF_WICKETS,
    SUM(EXTRA_RUNS) AS TOTAL_EXTRA_RUNS
FROM
    ipl_2008_2020;
    
    -- TORNAMENT duration Q2

SELECT 
    DATEDIFF(MAX(Date), MIN(Date)) AS TOTAL_DAYS,
    ROUND((DATEDIFF(MAX(date), MIN(date)) / 30), 2) AS TOTAL_MONTHS,
    ROUND((DATEDIFF(MAX(date), MIN(date)) / 365),
            2) AS TOTAL_YEARS
FROM
    IPL_Matches;
    
    
-- Number of matches per SEASONS Q3

SELECT 
    IPL_EDITION, COUNT(DISTINCT id) AS NUMBER_OF_MATCHES
FROM
    (SELECT 
        YEAR(date) AS IPL_EDITION, id
    FROM
        ipl_matches) subquery
GROUP BY IPL_EDITION;

-- Most playesr of the match or man of the match Q4

SELECT 
    (plyare_of_match) AS MAN_OF_THE_MATCH,
    COUNT(plyare_of_match) AS COUNT
FROM
    ipl_matches
GROUP BY plyare_of_match
ORDER BY COUNT(plyare_of_match) DESC;

-- Most playesr of the match or man of the match/season Q5

select * from
(select IPL_EDITION, (plyare_of_match) AS PLAYER, MoM, rank() over(PARTITION BY IPL_EDITION ORDER BY MoM desc) rnk from
(select year(date) as IPL_EDITION, plyare_of_match, count(plyare_of_match) as MoM from ipl_matches
GROUP BY plyare_of_match, year(date))a)b
where rnk=1 ;

 -- VENUES WHERE MATCH IS PLAYED Q6
 
SELECT 
    CITY, VENUE, COUNT(VENUE) AS 'NUMBER OF MATCHES'
FROM
    ipl_matches
GROUP BY VENUE , CITY
ORDER BY COUNT(VENUE) DESC;
 
SELECT 
    *
FROM
    IPL_MATCHES;
 
-- VENUES WITH TOSS METRICS Q7
SELECT 
    CITY,
    VENUE,
    COUNT(*) AS TOTAL_MATCH_PLAYED,
    SUM(CASE
        WHEN toss_decision = 'bat' THEN 1
        ELSE 0
    END) AS BAT_FIRST,
    SUM(CASE
        WHEN toss_decision = 'field' THEN 1
        ELSE 0
    END) AS FIELD_FIRST,
    CONCAT(ROUND(SUM(CASE
                        WHEN toss_decision = 'bat' THEN 1
                        ELSE 0
                    END) * 100 / COUNT(*),
                    2),
            '%') AS BAT_FIRST_PERCENTAGE,
    CONCAT(ROUND(SUM(CASE
                        WHEN toss_decision = 'field' THEN 1
                        ELSE 0
                    END) * 100 / COUNT(*),
                    2),
            '%') AS FIELD_FIRST_PERCENTAGE
FROM
    IPL_MATCHES
GROUP BY city , venue
HAVING BAT_FIRST > 0 AND FIELD_FIRST > 0
ORDER BY TOTAL_MATCH_PLAYED DESC;

 
-- TOP NEUTRAL VENUES WITH TOSS METRICS Q8

SELECT 
    CITY,
    VENUE AS NEUTRAL_VENUE,
    COUNT(*) AS TOTAL_MATCH_PLAYED,
    SUM(CASE
        WHEN toss_decision = 'bat' THEN 1
        ELSE 0
    END) AS BAT_FIRST,
    SUM(CASE
        WHEN toss_decision = 'field' THEN 1
        ELSE 0
    END) AS FIELD_FIRST,
    CONCAT(ROUND(SUM(CASE
                        WHEN toss_decision = 'bat' THEN 1
                        ELSE 0
                    END) * 100 / COUNT(*),
                    2),
            '%') AS BAT_FIRST_PERCENTAGE,
    CONCAT(ROUND(SUM(CASE
                        WHEN toss_decision = 'field' THEN 1
                        ELSE 0
                    END) * 100 / COUNT(*),
                    2),
            '%') AS FIELD_FIRST_PERCENTAGE
FROM
    IPL_MATCHES
WHERE
    neutral_venue = 1
GROUP BY city , venue
HAVING BAT_FIRST > 0 AND FIELD_FIRST > 0
    AND CITY <> 'NA'
ORDER BY TOTAL_MATCH_PLAYED DESC;
    
-- TOURNAMENT DISMISSAL KIND AND COUNT PERCENTAGE Q9

SELECT DISMISSAL_KIND, COUNT(*) AS COUNT, ROUND(COUNT(*) * 100 / SUM(COUNT(*)) OVER(), 2) AS PERCENTAGE
FROM IPL_2008_2020
GROUP BY DISMISSAL_KIND
HAVING DISMISSAL_KIND <> 'NA'
ORDER BY percentage DESC;


-- TOTAL RUN TYPE Q10

SELECT BATSMAN_RUNS AS RUN_TYPE, COUNT(*) as COUNT,
ROUND(COUNT(*) * 100 / SUM(COUNT(*)) OVER(), 2) AS PERCENTAGE
FROM IPL_2008_2020
WHERE BATSMAN_RUNS IN (4, 6, 1, 2, 3)
GROUP BY BATSMAN_RUNS
ORDER BY RUN_TYPE ;

-- UMPIRE NAMES Q11
 
SELECT 
    UMPIRE1 AS UMPIRE_1, UMPIRE2 AS UMPIRE_2
FROM
    ipl_matches
WHERE
    UMPIRE1 <> 'NA' AND UMPIRE2 <> 'NA';
 
 -- COUNT OF UMPIRE_1 WHO UMPIRED MOST THROUGHOUT THE SEASON Q12
 
SELECT 
    UMPIRE1 AS UMPIRE_1, COUNT(UMPIRE1) AS COUNT_OF_UMPIRE_1
FROM
    ipl_matches
GROUP BY UMPIRE1
HAVING UMPIRE1 <> 'NA'
ORDER BY COUNT_OF_UMPIRE_1 DESC
LIMIT 5;

 -- COUNT OF UMPIRE_2 WHO UMPIRED MOST THROUGHOUT THE SEASON Q13
    
SELECT 
    UMPIRE2 AS UMPIRE_2, COUNT(UMPIRE2) AS COUNT_OF_UMPIRE_2
FROM
    ipl_matches
GROUP BY UMPIRE2
HAVING UMPIRE2 <> 'NA'
ORDER BY COUNT_OF_UMPIRE_2 DESC
LIMIT 5;
 
 
 -- MATCH SUMMARY BY EDITION Q14
 
SELECT 
    IPL_EDITION,
    VENUE,
    CITY,
    DATES,
    TEAM1_IRRESPECTIVE_OF_INNING,
    TEAM2_IRRESPECTIVE_OF_INNING,
    FIRST_INNING,
    SECOND_INNING,
    WINNING_TEAM,
    MOM
FROM
    (SELECT 
        YEAR(M.DATE) AS IPL_EDITION,
            M.VENUE AS VENUE,
            M.CITY AS CITY,
            M.DATE AS DATES,
            M.TEAM1 AS TEAM1_IRRESPECTIVE_OF_INNING,
            M.TEAM2 AS TEAM2_IRRESPECTIVE_OF_INNING,
            M.WINNER AS WINNING_TEAM,
            M.plyare_of_match AS MOM,
            CONCAT(SUM(CASE
                WHEN B.inning = 1 THEN B.total_runs
            END), '/', SUM(CASE
                WHEN B.inning = 1 THEN B.is_wicket
            END)) AS first_inning,
            CONCAT(SUM(CASE
                WHEN B.inning = 2 THEN total_runs
            END), '/', SUM(CASE
                WHEN B.inning = 2 THEN B.is_wicket
            END)) AS second_inning
    FROM
        IPL_2008_2020 AS B
    JOIN IPL_MATCHES M ON B.ID = M.ID
    GROUP BY YEAR(M.DATE) , M.DATE , M.TEAM1 , M.TEAM2 , M.WINNER , M.VENUE , MOM , CITY
    HAVING TEAM1 <> '0') AS A;


-- BATSMAN ANALYSIS IPL 2008-2020


SELECT 
    COUNT(DISTINCT BATSMAN) AS NUMBER_OF_BATSMANS
FROM
    ipl_2008_2020;-- count of all batsmans Q1
 
SELECT DISTINCT
    BATSMAN AS BATSMAN_NAME
FROM
    ipl_2008_2020
GROUP BY BATSMAN
ORDER BY BATSMAN;
 
 -- TOTAL BATSMAN STATS COMPLETE Q3
 
SELECT 
    COUNT(DISTINCT id) AS MATCH_PLAYED,
    BATSMAN,
    SUM(batsman_runs) AS RUNS_SCORED,
    COUNT(BALL) AS BALL_FACED,
    ROUND((SUM(batsman_RUNS) / COUNT(BALL)) * 100,
            2) AS STRIKE_RATE,
    ROUND(SUM(batsman_runs) / (SUM(CASE
                WHEN IS_WICKET = '1' THEN 1
                ELSE 0
            END)),
            2) AS BATTING_AVG,
    SUM(CASE
        WHEN IS_WICKET = '1' THEN 1
        ELSE 0
    END) AS GOT_OUT,
    (COUNT(DISTINCT id) - SUM(CASE
        WHEN IS_WICKET = '1' THEN 1
        ELSE 0
    END)) AS NOT_OUT,
    SUM(CASE
        WHEN BATSMAN_RUNS = 4 THEN 1
        ELSE 0
    END) AS FOURS,
    SUM(CASE
        WHEN BATSMAN_RUNS = 6 THEN 1
        ELSE 0
    END) AS SIXES,
    ROUND(SUM(CASE
                WHEN BATSMAN_RUNS = 4 OR BATSMAN_RUNS = 6 THEN batsman_runs
                ELSE 0
            END) / SUM(batsman_runs) * 100,
            2) AS BOUNDARY_PERCENTAGE
FROM
    ipl_2008_2020
GROUP BY batsman
ORDER BY BATSMAN;

-- TOP 10 BATSMAN STATS COMPLETE Q4
 
SELECT 
    COUNT(DISTINCT id) AS MATCH_PLAYED,
    BATSMAN,
    SUM(batsman_runs) AS RUNS_SCORED,
    COUNT(BALL) AS BALL_FACED,
    ROUND((SUM(batsman_RUNS) / COUNT(BALL)) * 100,
            2) AS STRIKE_RATE,
    ROUND(SUM(batsman_runs) / (SUM(CASE
                WHEN IS_WICKET = '1' THEN 1
                ELSE 0
            END)),
            2) AS BATTING_AVG,
    SUM(CASE
        WHEN IS_WICKET = '1' THEN 1
        ELSE 0
    END) AS GOT_OUT,
    (COUNT(DISTINCT id) - SUM(CASE
        WHEN IS_WICKET = '1' THEN 1
        ELSE 0
    END)) AS NOT_OUT,
    SUM(CASE
        WHEN BATSMAN_RUNS = 4 THEN 1
        ELSE 0
    END) AS FOURS,
    SUM(CASE
        WHEN BATSMAN_RUNS = 6 THEN 1
        ELSE 0
    END) AS SIXES,
    ROUND(SUM(CASE
                WHEN BATSMAN_RUNS = 4 OR BATSMAN_RUNS = 6 THEN batsman_runs
                ELSE 0
            END) / SUM(batsman_runs) * 100,
            2) AS BOUNDARY_PERCENTAGE
FROM
    ipl_2008_2020
GROUP BY batsman
ORDER BY RUNS_SCORED DESC
LIMIT 10;

-- TOP 50 BATSMAN STATS COMPLETE Q5

SELECT 
    COUNT(DISTINCT id) AS MATCH_PLAYED,
    BATSMAN,
    SUM(batsman_runs) AS RUNS_SCORED,
    COUNT(BALL) AS BALL_FACED,
    ROUND((SUM(batsman_RUNS) / COUNT(BALL)) * 100,
            2) AS STRIKE_RATE,
    ROUND(SUM(batsman_runs) / (SUM(CASE
                WHEN IS_WICKET = '1' THEN 1
                ELSE 0
            END)),
            2) AS BATTING_AVG,
    SUM(CASE
        WHEN IS_WICKET = '1' THEN 1
        ELSE 0
    END) AS GOT_OUT,
    (COUNT(DISTINCT id) - SUM(CASE
        WHEN IS_WICKET = '1' THEN 1
        ELSE 0
    END)) AS NOT_OUT,
    SUM(CASE
        WHEN BATSMAN_RUNS = 4 THEN 1
        ELSE 0
    END) AS FOURS,
    SUM(CASE
        WHEN BATSMAN_RUNS = 6 THEN 1
        ELSE 0
    END) AS SIXES,
    ROUND(SUM(CASE
                WHEN BATSMAN_RUNS = 4 OR BATSMAN_RUNS = 6 THEN batsman_runs
                ELSE 0
            END) / SUM(batsman_runs) * 100,
            2) AS BOUNDARY_PERCENTAGE
FROM
    ipl_2008_2020
GROUP BY batsman
ORDER BY RUNS_SCORED DESC
LIMIT 50;

-- TOTAL RUNS SCORED BY % OF TOTAL RUNS Q6

SELECT 
    BATSMAN AS BATSMAN_NAME,
    SUM(batsman_runs) AS BATSMAN_RUNS,
    ROUND((SUM(batsman_runs) / (SELECT 
                    SUM(TOTAL_RUNS)
                FROM
                    ipl_2008_2020) * 100),
            2) AS PERCENTAGE_OF_TOTAL_RUNS
FROM
    ipl_2008_2020
GROUP BY batsman
ORDER BY PERCENTAGE_OF_TOTAL_RUNS DESC;-- TOTAL RUNS SCORED BY % OF TOTAL RUNS Q6



SELECT 
    BATSMAN AS BATSMAN_NAME,
    SUM(batsman_RUNS) AS TOTAL_RUNS,
    COUNT(BALL) AS TOTAL_BALL_FACED,
    ROUND((SUM(batsman_RUNS) / COUNT(BALL)) * 100,
            2) AS STIRKE_RATE,
    ROUND(SUM(batsman_runs) / (SUM(CASE
                WHEN IS_WICKET = '1' THEN 1
                ELSE 0
            END)),
            2) AS BATTING_AVG,
    SUM(CASE
        WHEN BATSMAN_RUNS = 4 THEN 1
        ELSE 0
    END) AS FOURS,
    SUM(CASE
        WHEN BATSMAN_RUNS = 6 THEN 1
        ELSE 0
    END) AS SIXES
FROM
    ipl_2008_2020
WHERE
    overS < 20
GROUP BY BATSMAN
HAVING TOTAL_BALL_FACED >= 504
    AND total_runs >= 2000
ORDER BY STIRKE_RATE DESC
LIMIT 10;

-- TOP 10 BATSMAN WITH HIGHEST STRIKE RATE IN POWERPLAY THROUGH SEASON Q 8

SELECT 
    BATSMAN AS BATSMAN_IN_POWER_PLAY,
    SUM(batsman_RUNS) AS TOTAL_RUNS,
    COUNT(BALL) AS TOTAL_BALL_FACED,
    ROUND((SUM(batsman_RUNS) / COUNT(BALL)) * 100,
            2) AS STIRKE_RATE,
    ROUND(SUM(batsman_runs) / (SUM(CASE
                WHEN IS_WICKET = '1' THEN 1
                ELSE 0
            END)),
            2) AS BATTING_AVG,
    SUM(CASE
        WHEN BATSMAN_RUNS = 4 THEN 1
        ELSE 0
    END) AS FOURS,
    SUM(CASE
        WHEN BATSMAN_RUNS = 6 THEN 1
        ELSE 0
    END) AS SIXES
FROM
    ipl_2008_2020
WHERE
    overS <= 6
GROUP BY BATSMAN
HAVING TOTAL_BALL_FACED >= 436
    AND total_runs >= 1000
ORDER BY STIRKE_RATE DESC
LIMIT 10;

-- TOP 10 BATSMAN WITH HIGHEST STRIKE RATE IN DEATH OVERS THROUGH SEASON Q 9

SELECT 
    BATSMAN AS BATSMAN_IN_DEATH_OVERS,
    SUM(batsman_RUNS) AS TOTAL_RUNS,
    COUNT(BALL) AS TOTAL_BALL_FACED,
    ROUND((SUM(batsman_RUNS) / COUNT(BALL)) * 100,
            2) AS STIRKE_RATE,
    ROUND(SUM(batsman_runs) / (SUM(CASE
                WHEN IS_WICKET = '1' THEN 1
                ELSE 0
            END)),
            2) AS BATTING_AVG,
    SUM(CASE
        WHEN BATSMAN_RUNS = 4 THEN 1
        ELSE 0
    END) AS FOURS,
    SUM(CASE
        WHEN BATSMAN_RUNS = 6 THEN 1
        ELSE 0
    END) AS SIXES
FROM
    ipl_2008_2020
WHERE
    overS >= 16
GROUP BY BATSMAN
HAVING TOTAL_BALL_FACED >= 288
    AND total_runs >= 500
ORDER BY STIRKE_RATE DESC
LIMIT 10;

-- batsman with run% 1s, 2s,3s, 0s Q10

SELECT 
    batsman AS BATSMAN_NAME, 
    COUNT(CASE WHEN batsman_runs = 1 THEN 1 END) AS "1s",
    COUNT(CASE WHEN batsman_runs = 2 THEN 1 END) AS "2s",    -- batsman with run% 1s, 2s,3s, 0s Q10
    COUNT(CASE WHEN batsman_runs = 3 THEN 1 END) AS "3s",
    COUNT(CASE WHEN batsman_runs = 0 THEN 1 END) AS "0s",
    ROUND(COUNT(*) * 100 / SUM(COUNT(*)) OVER(), 2) AS PERCENTAGE
FROM ipl_2008_2020
GROUP BY batsman
ORDER BY PERCENTAGE DESC;

-- batsman with 0 runs dot ball percentage Q11
    
SELECT 
    BATSMAN AS BATSMAN_NAME,
    SUM(BATSMAN_RUNS) AS TOTAL_RUNS,
    COUNT(BALL) AS TOTAL_BALL_FACED,
    COUNT(CASE
        WHEN batsman_runs = 0 THEN 1
    END) AS ZERO_RUN,
    ROUND(COUNT(CASE
                WHEN batsman_runs = 0 THEN 1
            END) * 100.0 / COUNT(*),
            2) AS DOT_BALL_PERCENTAGE
FROM
    ipl_2008_2020
WHERE
    overS <= 20
GROUP BY batsman
HAVING TOTAL_BALL_FACED >= 504
    AND total_runs >= 2000
ORDER BY DOT_BALL_PERCENTAGE DESC;

-- BATSMAN WITH boundary % Q12

SELECT 
    batsman AS BATSMAN_NAME, 
    COUNT(CASE WHEN batsman_runs = 4 THEN 1 END) AS "4s",
    COUNT(CASE WHEN batsman_runs = 6 THEN 1 END) AS "6s",
    ROUND(COUNT(*) * 100 / SUM(COUNT(*)) OVER(), 2) AS PERCENTAGE  -- BATSMAN WITH boundary % Q12
FROM ipl_2008_2020
GROUP BY batsman
ORDER BY PERCENTAGE DESC;

-- batsman WITH dismissal kind Q13

SELECT 
    BATSMAN AS BATSMAN_NAME,
    COUNT(*) AS TOTAL_DISMISSALS,
    COUNT(CASE
        WHEN dismissal_kind = 'BOWLED' THEN 1
    END) AS 'BOWLED',
    COUNT(CASE
        WHEN dismissal_kind = 'CAUGHT' THEN 1
    END) AS 'CAUGHT',
    COUNT(CASE
        WHEN dismissal_kind = 'CAUGHT AND BOWLED' THEN 1
    END) AS 'CAUGHT AND BOWLED',
    COUNT(CASE
        WHEN dismissal_kind = 'HIT WICKET' THEN 1
    END) AS 'HIT WICKET',
    COUNT(CASE
        WHEN dismissal_kind = 'LBW' THEN 1
    END) AS 'LBW',
    COUNT(CASE
        WHEN dismissal_kind = 'OBSTRUCTING THE FIELD' THEN 1
    END) AS 'OBSTRUCTING THE FIELD',
    COUNT(CASE
        WHEN dismissal_kind = 'RETIRED HURT' THEN 1
    END) AS 'RETIRED HURT',
    COUNT(CASE
        WHEN dismissal_kind = 'RUN OUT' THEN 1
    END) AS 'RUN OUT',
    COUNT(CASE
        WHEN dismissal_kind = 'STUMPED' THEN 1
    END) AS 'STUMPED'
FROM
    ipl_2008_2020
WHERE
    is_wicket = 1
GROUP BY batsman
ORDER BY total_dismissals DESC;

use ipl_analysis;

-- NUMBER OF BOWLERS WHO BOWLED IN IPL THROUGHOUT ALL THE SEASONS Q1

SELECT 
    COUNT(DISTINCT BOWLER) AS NUMBER_OF_BOWLER
FROM
    ipl_2008_2020;-- TOTAL COUNT
 
SELECT DISTINCT
    BOWLER AS BOWLER_NAME
FROM
    ipl_2008_2020
GROUP BY BOWLER
ORDER BY BOWLER;
 
 -- ALL BOWLER WHO BOWLED IN IPL WITH COMPLETE STATS BASED ON NAME Q3

SELECT 
    BOWLER AS BOWLER_NAME,
    COUNT(DISTINCT id) AS MATCH_PLAYED,
    SUM(IS_WICKET) AS WICKET_TAKEN,
    ROUND(SUM(TOTAL_RUNS) / (COUNT(overs) / 6), 2) AS ECONOMY_RATE,
    ROUND(SUM(TOTAL_RUNS) / SUM(IS_WICKET), 2) AS BOWLING_AVG,
    SUM(TOTAL_RUNS) AS TOTAL_RUNS_GIVEN,
    ROUND((COUNT(overs) / 6), 0) AS OVERS_BOWLED,
    COUNT(BALL) AS BALLS_BOWLED,
    SUM(extras_type = 'wides') AS WIDES,
    SUM(extras_type = 'noballs') AS NO_BALLS,
    SUM(CASE
        WHEN BATSMAN_RUNS = 4 THEN 1
        ELSE 0
    END) AS FOURS,
    SUM(CASE
        WHEN BATSMAN_RUNS = 6 THEN 1
        ELSE 0
    END) AS SIXES
FROM
    ipl_2008_2020
GROUP BY BOWLER
ORDER BY BOWLER;-- WICKET_TAKEN  DESC,

SELECT 
    BOWLER AS BOWLER_NAME,
    COUNT(DISTINCT id) AS MATCH_PLAYED,
    SUM(IS_WICKET) AS WICKET_TAKEN,
    ROUND(SUM(TOTAL_RUNS) / (COUNT(overs) / 6), 2) AS ECONOMY_RATE,
    ROUND(SUM(TOTAL_RUNS) / SUM(IS_WICKET), 2) AS BOWLING_AVG,
    SUM(TOTAL_RUNS) AS TOTAL_RUNS_GIVEN,
    ROUND((COUNT(overs) / 6), 0) AS OVERS_BOWLED,
    COUNT(BALL) AS BALLS_BOWLED,
    SUM(extras_type = 'wides') AS WIDES,
    SUM(extras_type = 'noballs') AS NO_BALLS,
    SUM(CASE
        WHEN BATSMAN_RUNS = 4 THEN 1
        ELSE 0
    END) AS FOURS,
    SUM(CASE
        WHEN BATSMAN_RUNS = 6 THEN 1
        ELSE 0
    END) AS SIXES
FROM
    ipl_2008_2020
GROUP BY BOWLER
ORDER BY WICKET_TAKEN DESC
LIMIT 10;

 -- TOP 50 BOWLER WHO BOWLED IN IPL WITH COMPLETE STATS BASED ON NAME Q5
 
SELECT 
    BOWLER AS BOWLER_NAME,
    COUNT(DISTINCT id) AS MATCH_PLAYED,
    SUM(IS_WICKET) AS WICKET_TAKEN,
    ROUND(SUM(TOTAL_RUNS) / (COUNT(overs) / 6), 2) AS ECONOMY_RATE,
    ROUND(SUM(TOTAL_RUNS) / SUM(IS_WICKET), 2) AS BOWLING_AVG,
    SUM(TOTAL_RUNS) AS TOTAL_RUNS_GIVEN,
    ROUND((COUNT(overs) / 6), 0) AS OVERS_BOWLED,
    COUNT(BALL) AS BALLS_BOWLED,
    SUM(extras_type = 'wides') AS WIDES,
    SUM(extras_type = 'noballs') AS NO_BALLS,
    SUM(CASE
        WHEN BATSMAN_RUNS = 4 THEN 1
        ELSE 0
    END) AS FOURS,
    SUM(CASE
        WHEN BATSMAN_RUNS = 6 THEN 1
        ELSE 0
    END) AS SIXES
FROM
    ipl_2008_2020
GROUP BY BOWLER
ORDER BY WICKET_TAKEN DESC
LIMIT 50;


-- TOP 10 BOWLER BASED ON WICKET TAKEN/MOST WICKET IN ALL MATCHES Q6

SELECT 
    BOWLER AS BOWLER_NAME,
    COUNT(DISTINCT id) AS MATCH_PLAYED,
    SUM(IS_WICKET) AS MOST_WICKETS
FROM
    ipl_2008_2020
WHERE
    OVERS < 20
GROUP BY BOWLER
HAVING COUNT(OVERS) >= 200
    AND MATCH_PLAYED >= 50
ORDER BY MOST_WICKETS DESC
LIMIT 10;

-- TOP 10 BOWLER BASED ON WICKET TAKEN/MOST WICKET IN DEATH OVERS Q7

SELECT 
    BOWLER AS BOWLER_NAME,
    COUNT(DISTINCT id) AS MATCH_PLAYED,
    SUM(IS_WICKET) AS MOST_WICKETS
FROM
    ipl_2008_2020
WHERE
    OVERS >= 16
GROUP BY BOWLER
HAVING COUNT(OVERS) >= 200
    AND MATCH_PLAYED >= 50
ORDER BY MOST_WICKETS DESC
LIMIT 10;

-- TOP 10 BOWLER BASED ON WICKET TAKEN/MOST WICKET IN POWER PLAY OVERS Q8

SELECT 
    BOWLER AS BOWLER_NAME,
    COUNT(DISTINCT id) AS Match_Played,
    SUM(IS_WICKET) AS MOST_WICKETS
FROM
    ipl_2008_2020
WHERE
    OVERS <= 6
GROUP BY BOWLER
HAVING COUNT(OVERS) >= 200
    AND MATCH_PLAYED >= 50
ORDER BY MOST_WICKETS DESC
LIMIT 10;

--  BOWLER WITH 3,4,5 WICKETS HAUL Q9

SELECT 
    BOWLER AS BOWLER_NAME,
    SUM(CASE
        WHEN IS_WICKET = 3 THEN 1
        ELSE 0
    END) AS THREE_WICKET_HAUL,
    SUM(CASE
        WHEN IS_WICKET = 4 THEN 1
        ELSE 0
    END) AS FOUR_WICKET_HAUL,
    SUM(CASE
        WHEN IS_WICKET = 5 THEN 1
        ELSE 0
    END) AS FIVE_WICKET_HAUL
FROM
    (SELECT DISTINCT
        ID, BOWLER, SUM(IS_WICKET) AS IS_WICKET
    FROM
        IPL_2008_2020
    GROUP BY ID , BOWLER) AS WICKETS
GROUP BY BOWLER
HAVING SUM(CASE
    WHEN IS_WICKET IN (3 , 4, 5) THEN 1
    ELSE 0
END) > 0
ORDER BY THREE_WICKET_HAUL DESC , FOUR_WICKET_HAUL DESC , FIVE_WICKET_HAUL DESC;

-- BOWLERS WITH DISMISSAL KIND  Q10

SELECT 
    BOWLER AS BOWLER_NAME,
    COUNT(*) AS TOTAL_WICKETS,
    COUNT(CASE
        WHEN dismissal_kind = 'BOWLED' THEN 1
    END) AS BOWLED,
    COUNT(CASE
        WHEN dismissal_kind = 'CAUGHT' THEN 1
    END) AS CAUGHT,
    COUNT(CASE
        WHEN dismissal_kind = 'CAUGHT AND BOWLED' THEN 1
    END) AS 'CAUGHT_&_BOWLED',
    COUNT(CASE
        WHEN dismissal_kind = 'LBW' THEN 1
    END) AS LBW
FROM
    ipl_2008_2020
WHERE
    is_wicket = 1
GROUP BY bowler
ORDER BY TOTAL_WICKETS DESC;

-- BOWLERS WITH MOST BOUNDARY % Q11

SELECT 
    bOWLER AS BOWLER_NAME, 
    COUNT(CASE WHEN batsman_runs = 4 THEN 1 END) AS "4s",
    COUNT(CASE WHEN batsman_runs = 6 THEN 1 END) AS "6s",
    ROUND(COUNT(*) * 100 / SUM(COUNT(*)) OVER(), 2) AS BOUNDARY_PERCENTAGE    -- BOWLERS WITH MOST BOUNDARY %
FROM ipl_2008_2020
GROUP BY bOWLER
ORDER BY BOUNDARY_PERCENTAGE DESC;

-- TOP 10 BOWLERS WITH BEST ECONOMY RATE Q12

SELECT 
    BOWLER AS BOWLER_NAME,
    COUNT(DISTINCT ID) AS MATCH_PLAYED,
    ROUND(SUM(TOTAL_RUNS) / (COUNT(overs) / 6), 2) AS ECONOMY_RATE
FROM
    IPL_2008_2020
GROUP BY BOWLER
HAVING COUNT(OVERS) >= 300
    AND MATCH_PLAYED >= 75
ORDER BY ECONOMY_RATE
LIMIT 10;

-- TOP 10 BOWLERS WITH BEST ECONOMY RATE IN POWER PLAY Q13

SELECT 
    BOWLER AS BOWLER_IN_PP,
    COUNT(DISTINCT ID) AS MATCH_PLAYED,
    ROUND(SUM(TOTAL_RUNS) / (COUNT(overs) / 6), 2) AS ECONOMY_RATE
FROM
    IPL_2008_2020
WHERE
    OVERS <= 6
GROUP BY BOWLER
HAVING COUNT(OVERS) >= 300
    AND MATCH_PLAYED >= 75
ORDER BY ECONOMY_RATE
LIMIT 10;

-- TOP 10 BOWLERS WITH BEST ECONOMY RATE IN DEATH OVERS Q14

SELECT 
    BOWLER AS BOWLER_IN_DEATH_OVERS,
    COUNT(DISTINCT ID) AS MATCH_PLAYED,
    ROUND(SUM(TOTAL_RUNS) / (COUNT(overs) / 6), 2) AS ECONOMY_RATE
FROM
    IPL_2008_2020
WHERE
    OVERS >= 16
GROUP BY BOWLER
HAVING COUNT(OVERS) >= 300
    AND MATCH_PLAYED >= 75
ORDER BY ECONOMY_RATE
LIMIT 10;

-- TOP 10 BOWLERS WITH BOWLING AVGS Q15

SELECT 
    BOWLER AS BOWLER_NAME,
    COUNT(DISTINCT ID) AS MATCH_PLAYED,
    ROUND(SUM(TOTAL_RUNS) / SUM(IS_WICKET), 2) AS BOWLING_AVG
FROM
    IPL_2008_2020
GROUP BY BOWLER
HAVING COUNT(OVERS) >= 300
    AND MATCH_PLAYED >= 75
ORDER BY BOWLING_AVG;


-- TOP 10 EXPENSIVE BOWLER Q16

SELECT 
    BOWLER AS BOWLER_NAME,
    COUNT(DISTINCT ID) AS MATCH_PLYAED,
    SUM(TOTAL_RUNS) AS RUNS_GIVEN
FROM
    IPL_2008_2020
WHERE
    EXTRAS_TYPE NOT IN ('BYES' , 'LEGBYES')
        AND OVERS < 20
GROUP BY BOWLER
ORDER BY RUNS_GIVEN DESC
LIMIT 10;

-- TOP 10 BOWLERS EXPENSIVE IN POWER PLAY Q17

SELECT 
    BOWLER AS BOWLER_IN_POWER_PLAY,
    COUNT(DISTINCT ID) AS MATCH_PLYAED,
    SUM(TOTAL_RUNS) AS RUNS_GIVEN
FROM
    IPL_2008_2020
WHERE
    EXTRAS_TYPE NOT IN ('BYES' , 'LEGBYES')
        AND OVERS <= 6
GROUP BY BOWLER
ORDER BY RUNS_GIVEN DESC
LIMIT 10;

-- TOP 10 BOWLERS MOST EXPENSIVE IN DEATH OVERS Q18

SELECT 
    BOWLER AS BOWLER_IN_DEATH_OVERS,
    COUNT(DISTINCT ID) AS MATCH_PLYAED,
    SUM(TOTAL_RUNS) AS RUNS_GIVEN
FROM
    IPL_2008_2020
WHERE
    EXTRAS_TYPE NOT IN ('BYES' , 'LEGBYES')
        AND OVERS >= 16
GROUP BY BOWLER
ORDER BY RUNS_GIVEN DESC
LIMIT 10;


-- TEAM SPECIFIC ANALYSIS


SELECT 
    *
FROM
    IPL_2008_2020;
SELECT 
    *
FROM
    ipl_matches;


-- TEAMS ANALYSIS

SELECT DISTINCT
    WINNER AS IPL_TEAMS, COUNT(WINNER) AS MATCHES_WIN
FROM
    ipl_matches
WHERE
    WINNER NOT IN ('BAT' , 'FIELD', 'NA')
GROUP BY WINNER
ORDER BY MATCHES_WIN DESC;
 
 -- TOTAL NUMBER OF MATCH PLAYED, 4S, 6S , RUNS AND WICKETS BY SEASON Q2
 
SELECT 
    YEAR(date) AS IPL_EDITION,
    COUNT(DISTINCT I.ID) AS MATCHES_PLAYED,
    SUM(I.TOTAL_RUNS = 4) AS TOTAL_FOURS,
    SUM(I.TOTAL_RUNS = 6) AS TOTAL_SIXES,
    SUM(i.total_runs) AS TOTAL_RUNS,
    COUNT(i.is_wicket) AS TOTAL_WICKETS
FROM
    IPL_2008_2020 I
        JOIN
    IPL_MATCHES M ON I.ID = M.ID
GROUP BY IPL_EDITION
ORDER BY IPL_EDITION;

-- ORANGE CAP HOLDERS Q3

SELECT IPL_EDITION, ORANGE_CAP_HOLDER, RUNS_SCORED, TEAM
FROM
( SELECT YEAR(M.DATE) AS IPL_EDITION,
B.BATSMAN AS ORANGE_CAP_HOLDER,
SUM(B.BATSMAN_RUNS) AS RUNS_SCORED,
B.BATTING_TEAM AS TEAM,
RANK() OVER (PARTITION BY YEAR(M.DATE) ORDER BY SUM(B.BATSMAN_RUNS) DESC) RNK
FROM IPL_2008_2020 B
JOIN IPL_MATCHES M ON B.ID = M.ID
GROUP BY YEAR(M.DATE), B.BATSMAN, B.BATTING_TEAM) AS SUBQUERY
WHERE RNK = 1;

-- PURPLE CAP HOLDERS Q4

SELECT IPL_EDITION, PURPLE_CAP_HOLDER, WICKETS_TAKEN, TEAM
FROM
(
SELECT YEAR(M.DATE) AS IPL_EDITION,
B.BOWLER AS PURPLE_CAP_HOLDER,
SUM(B.IS_WICKET) AS WICKETS_TAKEN,
B.BOWLING_TEAM AS TEAM,
RANK() OVER (PARTITION BY YEAR(M.DATE) ORDER BY SUM(B.IS_WICKET) DESC) RNK
FROM IPL_2008_2020 AS B
JOIN IPL_MATCHES M ON B.ID = M.ID
GROUP BY YEAR(M.DATE), B.BOWLER, B.BOWLING_TEAM) AS A
WHERE RNK = 1 AND PURPLE_CAP_HOLDER <> 'SP Narine';

-- TOTAL RUNS SCORED BY EACH TEAM Q5

SELECT 
    BATTING_TEAM AS TEAM, SUM(TOTAL_RUNS) AS RUNS_SCORED
FROM
    IPL_2008_2020
GROUP BY TEAM
ORDER BY RUNS_SCORED DESC
LIMIT 15;
      
-- TOTAL WICKETS TAKEN BY EACH TEAM Q6
SELECT 
    BOWLING_TEAM AS TEAM, SUM(IS_WICKET) AS WICKET_TAKEN
FROM
    IPL_2008_2020
GROUP BY TEAM
ORDER BY WICKET_TAKEN DESC
LIMIT 15;


-- TOTAL RUNS CONCEDED BY EACH TEAM Q7

SELECT 
    BOWLING_TEAM AS TEAM, SUM(TOTAL_RUNS) AS RUNS_CONCEDED
FROM
    IPL_2008_2020
GROUP BY TEAM
ORDER BY RUNS_CONCEDED DESC
LIMIT 15;

-- WINNER, RESULT BY RUNS OR WICKET Q8

SELECT 
    WINNER AS TEAMS,
    SUM(CASE
        WHEN result = 'runs' THEN 1
        ELSE 0
    END) AS WON_BY_RUNS,
    SUM(CASE
        WHEN result = 'WICKETS' THEN 1
        ELSE 0
    END) AS WON_BY_WICKETS
FROM
    IPL_MATCHES
GROUP BY WINNER
HAVING TEAMS NOT IN ('FIELD' , 'BAT', 'NA');
    
-- TEAMS TOSS ANALYSIS AND TOSS WIN PERCENTAGE Q9

SELECT 
    TOSS_WINNER AS TEAMS,
    COUNT(DISTINCT ID) AS MATCH_PLYAED,
    SUM(CASE
        WHEN TOSS_decision = 'bat' THEN 1
        ELSE 0
    END) + SUM(CASE
        WHEN TOSS_decision = 'field' THEN 1
        ELSE 0
    END) AS TOSS_WIN,
    SUM(CASE
        WHEN TOSS_decision NOT IN ('bat' , 'field') THEN 1
        ELSE 0
    END) AS TOSS_LOSS,
    SUM(CASE
        WHEN TOSS_decision = 'bat' THEN 1
        ELSE 0
    END) AS BAT_FIRST,
    SUM(CASE
        WHEN TOSS_decision = 'field' THEN 1
        ELSE 0
    END) AS FIELD_FIRST,
    ROUND(SUM(CASE
                WHEN TOSS_decision = 'bat' THEN 1
                ELSE 0
            END) + SUM(CASE
                WHEN TOSS_decision = 'field' THEN 1
                ELSE 0
            END) / COUNT(DISTINCT ID) * 100,
            2) AS TOSS_WIN_PERCENTAGE
FROM
    IPL_MATCHES
GROUP BY TOSS_WINNER
ORDER BY TOSS_WIN_PERCENTAGE DESC;

-- TEAM FIXTURES AND WINNERS Q10

SELECT 
    YEAR(DATE) AS IPL_EDITION,
    DATE,
    TEAM1,
    TEAM2,
    COALESCE(REPLACE(winner, 'NA', 'No Result'),
            'No Result') AS WINNER,
    COALESCE(REPLACE(RESULT, 'NA', 'No Result'),
            'No Result') AS RESULT,
    COALESCE(REPLACE(RESULT_MARGIN,
                'NA',
                'No Result'),
            'No Result') AS RESULT_MARGIN
FROM
    ipl_matches
WHERE
    winner NOT IN ('BAT' , 'FIELD')
ORDER BY IPL_EDITION;


 -- HOW MANY TIMES EACH TEAMS BATSMAN GOT OUT BY DISMISSAL_KIND Q11
 
SELECT 
    BATTING_TEAM AS BATTING_TEAM_GOT_OUT_BY,
    SUM(CASE
        WHEN DISMISSAL_KIND = 'CAUGHT' THEN 1
    END) AS CAUGHT,
    SUM(CASE
        WHEN DISMISSAL_KIND = 'CAUGHT AND BOWLED' THEN 1
    END) AS CAUGHT_AND_BOWLED,
    SUM(CASE
        WHEN DISMISSAL_KIND = 'RUN OUT' THEN 1
    END) AS RUN_OUT,
    SUM(CASE
        WHEN DISMISSAL_KIND = 'BOWLED' THEN 1
    END) AS BOWLED,
    SUM(CASE
        WHEN DISMISSAL_KIND = 'LBW' THEN 1
    END) AS LBW,
    SUM(CASE
        WHEN DISMISSAL_KIND = 'STUMPED' THEN 1
    END) AS STUMPED,
    SUM(CASE
        WHEN DISMISSAL_KIND = 'HIT WICKET' THEN 1
    END) AS HIT_WICKET,
    SUM(CASE
        WHEN DISMISSAL_KIND = 'RETIRED HURT' THEN 1
    END) AS RETIRED_HURT,
    SUM(CASE
        WHEN DISMISSAL_KIND = 'obstructing the field' THEN 1
    END) AS OBSTRUCTING_THE_FIELD
FROM
    IPL_2008_2020
GROUP BY BATTING_TEAM
ORDER BY CAUGHT DESC
LIMIT 15;

-- HOW MANY TIMES EACH BOWLING_TEAM_TOOK_WICKETS_BY DISMISSAL_KIND Q12
 
SELECT 
    BOWLING_TEAM AS BOWLING_TEAM_TOOK_WICKETS_BY,
    SUM(CASE
        WHEN DISMISSAL_KIND = 'CAUGHT' THEN 1
    END) AS CAUGHT,
    SUM(CASE
        WHEN DISMISSAL_KIND = 'CAUGHT AND BOWLED' THEN 1
    END) AS CAUGHT_AND_BOWLED,
    SUM(CASE
        WHEN DISMISSAL_KIND = 'RUN OUT' THEN 1
    END) AS RUN_OUT,
    SUM(CASE
        WHEN DISMISSAL_KIND = 'BOWLED' THEN 1
    END) AS BOWLED,
    SUM(CASE
        WHEN DISMISSAL_KIND = 'LBW' THEN 1
    END) AS LBW,
    SUM(CASE
        WHEN DISMISSAL_KIND = 'STUMPED' THEN 1
    END) AS STUMPED
FROM
    IPL_2008_2020
GROUP BY BOWLING_TEAM
ORDER BY CAUGHT DESC
LIMIT 15;

-- CATCH_MAGNETS AS MOST CATCHES TOOK BY PLYERS IN EACH EDITION Q13

SELECT IPL_EDITION, CATCH_MAGNET, CATCHES_TOOK, TEAM
FROM
(
SELECT YEAR(M.DATE) AS IPL_EDITION,
B.FIELDER AS CATCH_MAGNET,
SUM(CASE WHEN B.DISMISSAL_KIND = 'CAUGHT' THEN 1 END) AS CATCHES_TOOK,
B.BOWLING_TEAM AS TEAM,
RANK() OVER (PARTITION BY YEAR(M.DATE) ORDER BY SUM(B.DISMISSAL_KIND = 'CAUGHT') DESC) RNK
FROM IPL_2008_2020 AS B
JOIN IPL_MATCHES M ON B.ID = M.ID
GROUP BY YEAR(M.DATE), B.FIELDER, B.BOWLING_TEAM) AS A
WHERE RNK = 1
ORDER BY IPL_EDITION ;

-- WICKETKEEPER AS MOST STUMPING DONE BY PLYERS IN EACH EDITION Q14

SELECT IPL_EDITION, WICKETKEEPER, STUMPING, TEAM
FROM
(
SELECT YEAR(M.DATE) AS IPL_EDITION,
B.FIELDER AS WICKETKEEPER,
SUM(CASE WHEN B.DISMISSAL_KIND = 'STUMPED' THEN 1 END) AS STUMPING,
B.BOWLING_TEAM AS TEAM,
RANK() OVER (PARTITION BY YEAR(M.DATE) ORDER BY SUM(B.DISMISSAL_KIND = 'STUMPED') DESC) RNK
FROM IPL_2008_2020 AS B
JOIN IPL_MATCHES M ON B.ID = M.ID
GROUP BY YEAR(M.DATE), B.FIELDER, B.BOWLING_TEAM) AS A
WHERE RNK = 1
ORDER BY IPL_EDITION ;

/* SELECT IPL_EDITION, TEAMS, WICKET_TAKEN, MATCH_PLAYED 
FROM
(
SELECT
COUNT(DISTINCT B.ID) AS MATCH_PLAYED,  -- wicket taken by teams in each edition,
YEAR(M.DATE) AS IPL_EDITION,           -- due to faulty data results are not right
SUM(B.IS_WICKET) AS WICKET_TAKEN,
(B.BOWLING_TEAM) AS TEAMS,-- 
CASE
        WHEN (B.BOWLING_TEAM) IN ('Rising Pune Supergiant', 'Rising Pune Supergiants') THEN 'Pune Supergiants'
        ELSE (B.BOWLING_TEAM)
    END AS TEAM
    FROM IPL_2008_2020 AS B
    JOIN IPL_MATCHES AS M ON B.ID =M.ID
    GROUP BY YEAR(M.DATE), (B.BOWLING_TEAM)) AS A
    ORDER BY IPL_EDITION; -- DESC; */
    
    /* SELECT IPL_EDITION, TEAMS, RUNS_SCORED, MATCH_PLAYED
FROM
(
SELECT
COUNT(DISTINCT B.ID) AS MATCH_PLAYED,    -- runs scored by teams in each edition,
YEAR(M.DATE) AS IPL_EDITION,             -- due to faulty data results are not right
SUM(B.TOTAL_RUNS) AS RUNS_SCORED,
(B.BATTING_TEAM) AS TEAMS,-- 
CASE
        WHEN (B.BATTING_TEAM) IN ('Rising Pune Supergiant', 'Rising Pune Supergiants') THEN 'Pune Supergiants'
        ELSE (B.BATTING_TEAM)
    END AS TEAM
    FROM IPL_2008_2020 AS B
    JOIN IPL_MATCHES AS M ON B.ID =M.ID
    GROUP BY YEAR(M.DATE), (B.BATTING_TEAM)) AS A
    ORDER BY RUNS_SCORED DESC
    -- LIMIT 108; */
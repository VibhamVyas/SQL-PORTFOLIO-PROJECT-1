use ipl_analysis;

-- NUMBER OF BOWLERS WHO BOWLED IN IPL THROUGHOUT ALL THE SEASONS Q1

 SELECT  COUNT(DISTINCT BOWLER) AS NUMBER_OF_BOWLER FROM ipl_2008_2020; -- TOTAL COUNT
 
 -- BOWLER NAMES WHO BOWLED IN IPL THROUGHOUT ALL THE SEASONS Q2

SELECT DISTINCT BOWLER AS BOWLER_NAME FROM ipl_2008_2020 -- NAMES OF BOWLERS
 GROUP BY BOWLER
 ORDER BY BOWLER ;
 
 -- ALL BOWLER WHO BOWLED IN IPL WITH COMPLETE STATS BASED ON NAME Q3

SELECT BOWLER AS BOWLER_NAME,
    COUNT(DISTINCT id) AS MATCH_PLAYED, 
    SUM(IS_WICKET) AS WICKET_TAKEN,
    round(SUM(TOTAL_RUNS)/(count(overs)/6),2) as ECONOMY_RATE,
     ROUND(SUM(TOTAL_RUNS) / SUM(IS_WICKET), 2) AS BOWLING_AVG, 
         SUM(TOTAL_RUNS) AS TOTAL_RUNS_GIVEN,
     round((count(overs)/6),0) as OVERS_BOWLED,           -- ALL STATS ALL BOWLERS
        COUNT(BALL) AS BALLS_BOWLED,
  sum(extras_type = 'wides') as WIDES, sum(extras_type = 'noballs') AS NO_BALLS,    
    SUM(CASE WHEN BATSMAN_RUNS = 4 THEN 1 ELSE 0 END) AS FOURS,
    SUM(CASE WHEN BATSMAN_RUNS = 6 THEN 1 ELSE 0 END) AS SIXES
FROM
    ipl_2008_2020
GROUP BY BOWLER
ORDER BY  BOWLER ; -- WICKET_TAKEN  DESC,

 -- TOP 10 BOWLER WHO BOWLED IN IPL WITH COMPLETE STATS BASED ON WICKET TAKEN Q4

SELECT BOWLER AS BOWLER_NAME,
    COUNT(DISTINCT id) AS MATCH_PLAYED, 
    SUM(IS_WICKET) AS WICKET_TAKEN,
    round(SUM(TOTAL_RUNS)/(count(overs)/6),2) as ECONOMY_RATE,
     ROUND(SUM(TOTAL_RUNS) / SUM(IS_WICKET), 2) AS BOWLING_AVG, 
         SUM(TOTAL_RUNS) AS TOTAL_RUNS_GIVEN,
     round((count(overs)/6),0) as OVERS_BOWLED,           -- ALL STATS ALL BOWLERS
        COUNT(BALL) AS BALLS_BOWLED,
  sum(extras_type = 'wides') as WIDES, sum(extras_type = 'noballs') AS NO_BALLS,    
    SUM(CASE WHEN BATSMAN_RUNS = 4 THEN 1 ELSE 0 END) AS FOURS,
    SUM(CASE WHEN BATSMAN_RUNS = 6 THEN 1 ELSE 0 END) AS SIXES
FROM
    ipl_2008_2020
GROUP BY BOWLER
ORDER BY WICKET_TAKEN DESC 
LIMIT 10;

 -- TOP 50 BOWLER WHO BOWLED IN IPL WITH COMPLETE STATS BASED ON NAME Q5
 
SELECT BOWLER AS BOWLER_NAME,
    COUNT(DISTINCT id) AS MATCH_PLAYED, 
    SUM(IS_WICKET) AS WICKET_TAKEN,
    round(SUM(TOTAL_RUNS)/(count(overs)/6),2) as ECONOMY_RATE,
     ROUND(SUM(TOTAL_RUNS) / SUM(IS_WICKET), 2) AS BOWLING_AVG, 
         SUM(TOTAL_RUNS) AS TOTAL_RUNS_GIVEN,
     round((count(overs)/6),0) as OVERS_BOWLED,           -- ALL STATS ALL BOWLERS
        COUNT(BALL) AS BALLS_BOWLED,
  sum(extras_type = 'wides') as WIDES, sum(extras_type = 'noballs') AS NO_BALLS,    
    SUM(CASE WHEN BATSMAN_RUNS = 4 THEN 1 ELSE 0 END) AS FOURS,
    SUM(CASE WHEN BATSMAN_RUNS = 6 THEN 1 ELSE 0 END) AS SIXES
FROM
    ipl_2008_2020
GROUP BY BOWLER
ORDER BY WICKET_TAKEN DESC 
LIMIT 50;


-- TOP 10 BOWLER BASED ON WICKET TAKEN/MOST WICKET IN ALL MATCHES Q6

SELECT  BOWLER AS BOWLER_NAME,
count(distinct id) as MATCH_PLAYED,
    SUM(IS_WICKET) AS MOST_WICKETS   -- MOST WICKET IN 20 OVERS
FROM
    ipl_2008_2020
        WHERE OVERS < 20
GROUP BY BOWLER
HAVING COUNT(OVERS) >= 200 AND MATCH_PLAYED >=50
ORDER BY MOST_WICKETS DESC
LIMIT 10;

-- TOP 10 BOWLER BASED ON WICKET TAKEN/MOST WICKET IN DEATH OVERS Q7

SELECT  BOWLER AS BOWLER_NAME,
count(distinct id) as MATCH_PLAYED,
    SUM(IS_WICKET) AS MOST_WICKETS   -- MOST WICKET IN DEATH OVERS > 16
FROM
    ipl_2008_2020
        WHERE OVERS >= 16
GROUP BY BOWLER
HAVING COUNT(OVERS) >= 200 AND MATCH_PLAYED >=50
ORDER BY MOST_WICKETS DESC
LIMIT 10;

-- TOP 10 BOWLER BASED ON WICKET TAKEN/MOST WICKET IN POWER PLAY OVERS Q8

SELECT  BOWLER AS BOWLER_NAME,
count(distinct id) as Match_Played,
    SUM(IS_WICKET) AS MOST_WICKETS   -- MOST WICKET IN POWER PLAY OVERS < 6
FROM
    ipl_2008_2020
        WHERE OVERS <= 6
GROUP BY BOWLER
HAVING COUNT(OVERS) >= 200 AND MATCH_PLAYED >=50
ORDER BY MOST_WICKETS DESC
LIMIT 10;

--  BOWLER WITH 3,4,5 WICKETS HAUL Q9

SELECT 
    BOWLER AS BOWLER_NAME, 
    SUM(CASE WHEN IS_WICKET = 3 THEN 1 ELSE 0 END) AS THREE_WICKET_HAUL,
    SUM(CASE WHEN IS_WICKET = 4 THEN 1 ELSE 0 END) AS FOUR_WICKET_HAUL,    --  BOWLER WITH 3,4,5 WICKETS HAUL
    SUM(CASE WHEN IS_WICKET = 5 THEN 1 ELSE 0 END) AS FIVE_WICKET_HAUL
FROM (
    SELECT DISTINCT ID, BOWLER, SUM(IS_WICKET) AS IS_WICKET
    FROM IPL_2008_2020
    GROUP BY ID, BOWLER
) AS WICKETS
-- WHERE IS_WICKET >= 3 
GROUP BY BOWLER
HAVING SUM(CASE WHEN IS_WICKET IN (3, 4, 5) THEN 1 ELSE 0 END) > 0
ORDER BY THREE_WICKET_HAUL DESC, FOUR_WICKET_HAUL DESC, FIVE_WICKET_HAUL DESC;

-- BOWLERS WITH DISMISSAL KIND  Q10

SELECT 
    BOWLER AS BOWLER_NAME,
   COUNT(*) AS TOTAL_WICKETS,
    COUNT(CASE WHEN dismissal_kind = 'BOWLED' THEN 1 END) AS BOWLED,
    COUNT(CASE WHEN dismissal_kind = 'CAUGHT' THEN 1 END) AS CAUGHT,   -- BOWLERS WITH DISMISSAL KIND
    COUNT(CASE WHEN dismissal_kind = 'CAUGHT AND BOWLED' THEN 1 END) AS 'CAUGHT_&_BOWLED',
    COUNT(CASE WHEN dismissal_kind = 'LBW' THEN 1 END) AS LBW
    FROM ipl_2008_2020
WHERE is_wicket = 1
GROUP BY bowler
ORDER BY TOTAL_WICKETS DESC;

-- BOWLERS WITH MOST BOUNDARY % Q11

SELECT 
    bOWLER AS BOWLER_NAME, 
    COUNT(CASE WHEN batsman_runs = 4 THEN 1 END) AS "4s",
    COUNT(CASE WHEN batsman_runs = 6 THEN 1 END) AS "6s",
    ROUND(COUNT(*) * 100 / SUM(COUNT(*)) OVER(), 2) AS BOUNDARY_PERCENTAGE    -- BOWLERS WITH MOST BOUNDARY %
FROM ipl_2008_2020
GROUP BY bOWLER
ORDER BY BOUNDARY_PERCENTAGE DESC;

-- TOP 10 BOWLERS WITH BEST ECONOMY RATE Q12

SELECT BOWLER AS BOWLER_NAME, COUNT(DISTINCT ID) AS MATCH_PLAYED,
round(SUM(TOTAL_RUNS)/(count(overs)/6),2) as ECONOMY_RATE     -- TOP 10 BOWLERS WITH BEST ECONOMY RATE
FROM IPL_2008_2020
GROUP BY BOWLER
HAVING COUNT(OVERS) >= 300 AND MATCH_PLAYED >= 75
ORDER BY ECONOMY_RATE
LIMIT 10;

-- TOP 10 BOWLERS WITH BEST ECONOMY RATE IN POWER PLAY Q13

SELECT BOWLER AS BOWLER_IN_PP, COUNT(DISTINCT ID) AS MATCH_PLAYED,
round(SUM(TOTAL_RUNS)/(count(overs)/6),2) as ECONOMY_RATE    
FROM IPL_2008_2020
  WHERE OVERS <= 6                             -- TOP 10 BOWLERS WITH BEST ECONOMY RATE IN POWER PLAY
GROUP BY BOWLER
HAVING COUNT(OVERS) >= 300 AND MATCH_PLAYED >= 75
ORDER BY ECONOMY_RATE
LIMIT 10;

-- TOP 10 BOWLERS WITH BEST ECONOMY RATE IN DEATH OVERS Q14

SELECT BOWLER AS BOWLER_IN_DEATH_OVERS, COUNT(DISTINCT ID) AS MATCH_PLAYED,
round(SUM(TOTAL_RUNS)/(count(overs)/6),2) as ECONOMY_RATE    
FROM IPL_2008_2020
  WHERE OVERS >= 16                             -- TOP 10 BOWLERS WITH BEST ECONOMY RATE IN DEATH OVERS
GROUP BY BOWLER
HAVING COUNT(OVERS) >= 300 AND MATCH_PLAYED >= 75
ORDER BY ECONOMY_RATE
LIMIT 10;

-- TOP 10 BOWLERS WITH BOWLING AVGS Q15

SELECT BOWLER AS BOWLER_NAME, COUNT(DISTINCT ID) AS MATCH_PLAYED,
     ROUND(SUM(TOTAL_RUNS) / SUM(IS_WICKET), 2) AS BOWLING_AVG
FROM IPL_2008_2020
GROUP BY BOWLER
HAVING COUNT(OVERS) >= 300 AND MATCH_PLAYED >=75    -- TOP 10 BOWLERS WITH BOWLING AVGS Q14
ORDER BY BOWLING_AVG;


-- TOP 10 EXPENSIVE BOWLER Q16

SELECT BOWLER AS BOWLER_NAME, COUNT(DISTINCT ID) AS MATCH_PLYAED,
SUM(TOTAL_RUNS) AS RUNS_GIVEN
FROM IPL_2008_2020
WHERE EXTRAS_TYPE NOT IN ('BYES', 'LEGBYES') AND OVERS < 20    -- TOP 10 EXPENSIVE BOWLER
GROUP BY BOWLER
ORDER BY RUNS_GIVEN DESC
LIMIT 10;

-- TOP 10 BOWLERS EXPENSIVE IN POWER PLAY Q17

SELECT BOWLER AS BOWLER_IN_POWER_PLAY, COUNT(DISTINCT ID) AS MATCH_PLYAED,
SUM(TOTAL_RUNS) AS RUNS_GIVEN
FROM IPL_2008_2020
WHERE EXTRAS_TYPE NOT IN ('BYES', 'LEGBYES') AND OVERS <=6     -- TOP 10 EXPENSIVE BOWLER IN POWER PLAY
GROUP BY BOWLER
ORDER BY RUNS_GIVEN DESC
LIMIT 10;

-- TOP 10 BOWLERS MOST EXPENSIVE IN DEATH OVERS Q18

SELECT BOWLER AS BOWLER_IN_DEATH_OVERS, COUNT(DISTINCT ID) AS MATCH_PLYAED,
SUM(TOTAL_RUNS) AS RUNS_GIVEN
FROM IPL_2008_2020
WHERE EXTRAS_TYPE NOT IN ('BYES', 'LEGBYES') AND OVERS >=16     -- TOP 10 EXPENSIVE BOWLER IN DEATH OVERS
GROUP BY BOWLER
ORDER BY RUNS_GIVEN DESC
LIMIT 10;



